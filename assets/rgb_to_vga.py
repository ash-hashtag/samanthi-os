
from PIL import Image
import numpy as np
import sys
import threading


vga_colors = [

(0x00,0x00,0x00),(0x00,0x00,0x2a),(0x00,0x2a,0x00),(0x00,0x2a,0x2a),(0x2a,0x00,0x00),(0x2a,0x00,0x2a),(0x2a,0x15,0x00),(0x2a,0x2a,0x2a),
  (0x15,0x15,0x15),(0x15,0x15,0x3f),(0x15,0x3f,0x15),(0x15,0x3f,0x3f),(0x3f,0x15,0x15),(0x3f,0x15,0x3f),(0x3f,0x3f,0x15),(0x3f,0x3f,0x3f),
  (0x00,0x00,0x00),(0x05,0x05,0x05),(0x08,0x08,0x08),(0x0b,0x0b,0x0b),(0x0e,0x0e,0x0e),(0x11,0x11,0x11),(0x14,0x14,0x14),(0x18,0x18,0x18),
  (0x1c,0x1c,0x1c),(0x20,0x20,0x20),(0x24,0x24,0x24),(0x28,0x28,0x28),(0x2d,0x2d,0x2d),(0x32,0x32,0x32),(0x38,0x38,0x38),(0x3f,0x3f,0x3f),
  (0x00,0x00,0x3f),(0x10,0x00,0x3f),(0x1f,0x00,0x3f),(0x2f,0x00,0x3f),(0x3f,0x00,0x3f),(0x3f,0x00,0x2f),(0x3f,0x00,0x1f),(0x3f,0x00,0x10),
  (0x3f,0x00,0x00),(0x3f,0x10,0x00),(0x3f,0x1f,0x00),(0x3f,0x2f,0x00),(0x3f,0x3f,0x00),(0x2f,0x3f,0x00),(0x1f,0x3f,0x00),(0x10,0x3f,0x00),
  (0x00,0x3f,0x00),(0x00,0x3f,0x10),(0x00,0x3f,0x1f),(0x00,0x3f,0x2f),(0x00,0x3f,0x3f),(0x00,0x2f,0x3f),(0x00,0x1f,0x3f),(0x00,0x10,0x3f),
  (0x1f,0x1f,0x3f),(0x27,0x1f,0x3f),(0x2f,0x1f,0x3f),(0x37,0x1f,0x3f),(0x3f,0x1f,0x3f),(0x3f,0x1f,0x37),(0x3f,0x1f,0x2f),(0x3f,0x1f,0x27),

  (0x3f,0x1f,0x1f),(0x3f,0x27,0x1f),(0x3f,0x2f,0x1f),(0x3f,0x37,0x1f),(0x3f,0x3f,0x1f),(0x37,0x3f,0x1f),(0x2f,0x3f,0x1f),(0x27,0x3f,0x1f),
  (0x1f,0x3f,0x1f),(0x1f,0x3f,0x27),(0x1f,0x3f,0x2f),(0x1f,0x3f,0x37),(0x1f,0x3f,0x3f),(0x1f,0x37,0x3f),(0x1f,0x2f,0x3f),(0x1f,0x27,0x3f),
  (0x2d,0x2d,0x3f),(0x31,0x2d,0x3f),(0x36,0x2d,0x3f),(0x3a,0x2d,0x3f),(0x3f,0x2d,0x3f),(0x3f,0x2d,0x3a),(0x3f,0x2d,0x36),(0x3f,0x2d,0x31),
  (0x3f,0x2d,0x2d),(0x3f,0x31,0x2d),(0x3f,0x36,0x2d),(0x3f,0x3a,0x2d),(0x3f,0x3f,0x2d),(0x3a,0x3f,0x2d),(0x36,0x3f,0x2d),(0x31,0x3f,0x2d),
  (0x2d,0x3f,0x2d),(0x2d,0x3f,0x31),(0x2d,0x3f,0x36),(0x2d,0x3f,0x3a),(0x2d,0x3f,0x3f),(0x2d,0x3a,0x3f),(0x2d,0x36,0x3f),(0x2d,0x31,0x3f),
  (0x00,0x00,0x1c),(0x07,0x00,0x1c),(0x0e,0x00,0x1c),(0x15,0x00,0x1c),(0x1c,0x00,0x1c),(0x1c,0x00,0x15),(0x1c,0x00,0x0e),(0x1c,0x00,0x07),
  (0x1c,0x00,0x00),(0x1c,0x07,0x00),(0x1c,0x0e,0x00),(0x1c,0x15,0x00),(0x1c,0x1c,0x00),(0x15,0x1c,0x00),(0x0e,0x1c,0x00),(0x07,0x1c,0x00),
  (0x00,0x1c,0x00),(0x00,0x1c,0x07),(0x00,0x1c,0x0e),(0x00,0x1c,0x15),(0x00,0x1c,0x1c),(0x00,0x15,0x1c),(0x00,0x0e,0x1c),(0x00,0x07,0x1c),

  (0x0e,0x0e,0x1c),(0x11,0x0e,0x1c),(0x15,0x0e,0x1c),(0x18,0x0e,0x1c),(0x1c,0x0e,0x1c),(0x1c,0x0e,0x18),(0x1c,0x0e,0x15),(0x1c,0x0e,0x11),
  (0x1c,0x0e,0x0e),(0x1c,0x11,0x0e),(0x1c,0x15,0x0e),(0x1c,0x18,0x0e),(0x1c,0x1c,0x0e),(0x18,0x1c,0x0e),(0x15,0x1c,0x0e),(0x11,0x1c,0x0e),
  (0x0e,0x1c,0x0e),(0x0e,0x1c,0x11),(0x0e,0x1c,0x15),(0x0e,0x1c,0x18),(0x0e,0x1c,0x1c),(0x0e,0x18,0x1c),(0x0e,0x15,0x1c),(0x0e,0x11,0x1c),
  (0x14,0x14,0x1c),(0x16,0x14,0x1c),(0x18,0x14,0x1c),(0x1a,0x14,0x1c),(0x1c,0x14,0x1c),(0x1c,0x14,0x1a),(0x1c,0x14,0x18),(0x1c,0x14,0x16),
  (0x1c,0x14,0x14),(0x1c,0x16,0x14),(0x1c,0x18,0x14),(0x1c,0x1a,0x14),(0x1c,0x1c,0x14),(0x1a,0x1c,0x14),(0x18,0x1c,0x14),(0x16,0x1c,0x14),
  (0x14,0x1c,0x14),(0x14,0x1c,0x16),(0x14,0x1c,0x18),(0x14,0x1c,0x1a),(0x14,0x1c,0x1c),(0x14,0x1a,0x1c),(0x14,0x18,0x1c),(0x14,0x16,0x1c),
  (0x00,0x00,0x10),(0x04,0x00,0x10),(0x08,0x00,0x10),(0x0c,0x00,0x10),(0x10,0x00,0x10),(0x10,0x00,0x0c),(0x10,0x00,0x08),(0x10,0x00,0x04),
  (0x10,0x00,0x00),(0x10,0x04,0x00),(0x10,0x08,0x00),(0x10,0x0c,0x00),(0x10,0x10,0x00),(0x0c,0x10,0x00),(0x08,0x10,0x00),(0x04,0x10,0x00),

  (0x00,0x10,0x00),(0x00,0x10,0x04),(0x00,0x10,0x08),(0x00,0x10,0x0c),(0x00,0x10,0x10),(0x00,0x0c,0x10),(0x00,0x08,0x10),(0x00,0x04,0x10),
  (0x08,0x08,0x10),(0x0a,0x08,0x10),(0x0c,0x08,0x10),(0x0e,0x08,0x10),(0x10,0x08,0x10),(0x10,0x08,0x0e),(0x10,0x08,0x0c),(0x10,0x08,0x0a),
  (0x10,0x08,0x08),(0x10,0x0a,0x08),(0x10,0x0c,0x08),(0x10,0x0e,0x08),(0x10,0x10,0x08),(0x0e,0x10,0x08),(0x0c,0x10,0x08),(0x0a,0x10,0x08),
  (0x08,0x10,0x08),(0x08,0x10,0x0a),(0x08,0x10,0x0c),(0x08,0x10,0x0e),(0x08,0x10,0x10),(0x08,0x0e,0x10),(0x08,0x0c,0x10),(0x08,0x0a,0x10),
  (0x0b,0x0b,0x10),(0x0c,0x0b,0x10),(0x0d,0x0b,0x10),(0x0f,0x0b,0x10),(0x10,0x0b,0x10),(0x10,0x0b,0x0f),(0x10,0x0b,0x0d),(0x10,0x0b,0x0c),
  (0x10,0x0b,0x0b),(0x10,0x0c,0x0b),(0x10,0x0d,0x0b),(0x10,0x0f,0x0b),(0x10,0x10,0x0b),(0x0f,0x10,0x0b),(0x0d,0x10,0x0b),(0x0c,0x10,0x0b),
  (0x0b,0x10,0x0b),(0x0b,0x10,0x0c),(0x0b,0x10,0x0d),(0x0b,0x10,0x0f),(0x0b,0x10,0x10),(0x0b,0x0f,0x10),(0x0b,0x0d,0x10),(0x0b,0x0c,0x10)
]

def color_distance(c1, c2):
    return sum((int(x) - int(y)) ** 2 for x, y in zip(c1, c2))

def rgb_to_vga_color(rgb):
    # vga_colors = [
    #     (0, 0, 0),       # Black
    #     (0, 0, 170),     # Blue
    #     (0, 170, 0),     # Green
    #     (0, 170, 170),   # Cyan
    #     (170, 0, 0),     # Red
    #     (170, 0, 170),   # Magenta
    #     (170, 85, 0),    # Brown
    #     (170, 170, 170), # Light Gray
    #     (85, 85, 85),    # Dark Gray
    #     (85, 85, 255),   # Light Blue
    #     (85, 255, 85),   # Light Green
    #     (85, 255, 255),  # Light Cyan
    #     (255, 85, 85),   # Light Red
    #     (255, 85, 255),  # Light Magenta
    #     (255, 255, 85),  # Yellow
    #     (255, 255, 255)  # White
    # ]
    # Calculate squared Euclidean distance to find closest match

    # Find closest VGA color
    # closest_color = min(vga_colors, key=lambda c: color_distance(rgb, c))

    closest_index = 0;
    closest_distance = 99999999;
    for i in range(len(vga_colors)):
        distance = color_distance(vga_colors[i], rgb)
        if distance < closest_distance:
            closest_index = i
            closest_distance = distance
    return closest_index




def process_file(input: str):
    output_file = f'{input}.vga'
    image = Image.open(input).convert('RGB').resize((320, 200))
    img_array= np.array(image)
    body = img_array.reshape(-1, 3)
    output = bytearray()
    for rgb in body:
        r = rgb[0]
        g = rgb[1]
        b = rgb[2]
        vc = rgb_to_vga_color((r, g, b))
        if vc < 0:
            raise Exception("Invalid color")
        output.append(vc)
    with open(output_file,  'wb') as wf:
        wf.write(output)
    

handles = []
for input in sys.argv[1:]:
    thread = threading.Thread(target=process_file, args=(input,))
    thread.start()
    handles.append(thread)


for handle in handles:
    handle.join()




